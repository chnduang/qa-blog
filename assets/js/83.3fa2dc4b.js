(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{375:function(t,n,s){"use strict";s.r(n);var e=s(4),a=Object(e.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"javascript-复杂判断的更优雅写法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript-复杂判断的更优雅写法"}},[t._v("#")]),t._v(" JavaScript 复杂判断的更优雅写法")]),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://mp.weixin.qq.com/s/-ZG-3i5y7TsTdwUAXvL6bw",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://mp.weixin.qq.com/s/-ZG-3i5y7TsTdwUAXvL6bw"),n("OutboundLink")],1)])]),t._v(" "),n("h2",{attrs:{id:"举个例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#举个例子"}},[t._v("#")]),t._v(" 举个例子")]),t._v(" "),n("p",[t._v("先看一段代码：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("/**\n * 按钮点击事件\n * @param {number} status 活动状态：1 开团进行中 2 开团失败 3 商品售罄 4 开团成功 5 系统取消\n */\nconst onButtonClick = (status)=>{\n  if(status == 1){\n    sendLog('processing')\n    jumpTo('IndexPage')\n  }else if(status == 2){\n    sendLog('fail')\n    jumpTo('FailPage')\n  }else if(status == 3){\n    sendLog('fail')\n    jumpTo('FailPage')\n  }else if(status == 4){\n    sendLog('success')\n    jumpTo('SuccessPage')\n  }else if(status == 5){\n    sendLog('cancel')\n    jumpTo('CancelPage')\n  }else {\n    sendLog('other')\n    jumpTo('Index')\n  }\n}\n")])])]),n("p",[t._v("通过代码可以看到这个按钮的点击逻辑：根据不同活动状态做两件事情，发送日志埋点和跳转到对应页面，大家可以很轻易的提出这段代码的改写方案，"),n("code",[t._v("switch")]),t._v("出场：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("/**\n * 按钮点击事件\n * @param {number} status 活动状态：1 开团进行中 2 开团失败 3 商品售罄 4 开团成功 5 系统取消\n */\nconst onButtonClick = (status)=>{\n  switch (status){\n    case 1:\n      sendLog('processing')\n      jumpTo('IndexPage')\n      break\n    case 2:\n    case 3:\n      sendLog('fail')\n      jumpTo('FailPage')\n      break  \n    case 4:\n      sendLog('success')\n      jumpTo('SuccessPage')\n      break\n    case 5:\n      sendLog('cancel')\n      jumpTo('CancelPage')\n      break\n    default:\n      sendLog('other')\n      jumpTo('Index')\n      break\n  }\n}\n")])])]),n("p",[t._v("嗯，这样看起来比"),n("code",[t._v("if/else")]),t._v("清晰多了，细心的同学也发现了小技巧，"),n("code",[t._v("case 2")]),t._v("和"),n("code",[t._v("case 3")]),t._v("逻辑一样的时候，可以省去执行语句和"),n("code",[t._v("break")]),t._v("，则"),n("code",[t._v("case 2")]),t._v("的情况自动执行"),n("code",[t._v("case 3")]),t._v("的逻辑。")]),t._v(" "),n("p",[t._v("这时有同学会说，还有更简单的写法：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const actions = {\n  '1': ['processing','IndexPage'],\n  '2': ['fail','FailPage'],\n  '3': ['fail','FailPage'],\n  '4': ['success','SuccessPage'],\n  '5': ['cancel','CancelPage'],\n  'default': ['other','Index'],\n}\n/**\n * 按钮点击事件\n * @param {number} status 活动状态：1开团进行中 2开团失败 3 商品售罄 4 开团成功 5 系统取消\n */\nconst onButtonClick = (status)=>{\n  let action = actions[status] || actions['default'],\n      logName = action[0],\n      pageName = action[1]\n  sendLog(logName)\n  jumpTo(pageName)\n}\n")])])]),n("p",[t._v("上面代码确实看起来更清爽了，这种方法的聪明之处在于：将判断条件作为对象的属性名，将处理逻辑作为对象的属性值，在按钮点击的时候，通过对象属性查找的方式来进行逻辑判断，这种写法特别适合一元条件判断的情况。")]),t._v(" "),n("p",[t._v("是不是还有其他写法呢？有的：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const actions = new Map([\n  [1, ['processing','IndexPage']],\n  [2, ['fail','FailPage']],\n  [3, ['fail','FailPage']],\n  [4, ['success','SuccessPage']],\n  [5, ['cancel','CancelPage']],\n  ['default', ['other','Index']]\n])\n/**\n * 按钮点击事件\n * @param {number} status 活动状态：1 开团进行中 2 开团失败 3 商品售罄 4 开团成功 5 系统取消\n */\nconst onButtonClick = (status)=>{\n  let action = actions.get(status) || actions.get('default')\n  sendLog(action[0])\n  jumpTo(action[1])\n}\n")])])]),n("p",[t._v("这样写用到了es6里的"),n("code",[t._v("Map")]),t._v("对象，是不是更爽了？"),n("code",[t._v("Map")]),t._v("对象和"),n("code",[t._v("Object")]),t._v("对象有什么区别呢？")]),t._v(" "),n("ul",[n("li",[t._v('一个对象通常都有自己的原型，所以一个对象总有一个"'),n("code",[t._v("prototype")]),t._v('"键。')]),t._v(" "),n("li",[t._v("一个对象的键只能是字符串或者"),n("code",[t._v("Symbols")]),t._v("，但一个"),n("code",[t._v("Map")]),t._v("的键可以是任意值。")]),t._v(" "),n("li",[t._v("你可以通过"),n("code",[t._v("size")]),t._v("属性很容易地得到一个"),n("code",[t._v("Map")]),t._v("的键值对个数，而对象的键值对个数只能手动确认。")])]),t._v(" "),n("p",[t._v("我们需要把问题升级一下，以前按钮点击时候只需要判断"),n("code",[t._v("status")]),t._v("，现在还需要判断用户的身份：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("/**\n * 按钮点击事件\n * @param {number} status 活动状态：1开团进行中 2开团失败 3 开团成功 4 商品售罄 5 有库存未开团\n * @param {string} identity 身份标识：guest客态 master主态\n */\nconst onButtonClick = (status,identity)=>{\n  if(identity == 'guest'){\n    if(status == 1){\n      //do sth\n    }else if(status == 2){\n      //do sth\n    }else if(status == 3){\n      //do sth\n    }else if(status == 4){\n      //do sth\n    }else if(status == 5){\n      //do sth\n    }else {\n      //do sth\n    }\n  }else if(identity == 'master') {\n    if(status == 1){\n      //do sth\n    }else if(status == 2){\n      //do sth\n    }else if(status == 3){\n      //do sth\n    }else if(status == 4){\n      //do sth\n    }else if(status == 5){\n      //do sth\n    }else {\n      //do sth\n    }\n  }\n}\n")])])]),n("p",[t._v("原谅我不写每个判断里的具体逻辑了，因为代码太冗长了。")]),t._v(" "),n("p",[t._v("原谅我又用了"),n("code",[t._v("if/else")]),t._v("，因为我看到很多人依然在用"),n("code",[t._v("if/else")]),t._v("写这种大段的逻辑判断。")]),t._v(" "),n("p",[t._v("从上面的例子我们可以看到，当你的逻辑升级为二元判断时，你的判断量会加倍，你的代码量也会加倍，这时怎么写更清爽呢？")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const actions = new Map([\n  ['guest_1', ()=>{/*do sth*/}],\n  ['guest_2', ()=>{/*do sth*/}],\n  ['guest_3', ()=>{/*do sth*/}],\n  ['guest_4', ()=>{/*do sth*/}],\n  ['guest_5', ()=>{/*do sth*/}],\n  ['master_1', ()=>{/*do sth*/}],\n  ['master_2', ()=>{/*do sth*/}],\n  ['master_3', ()=>{/*do sth*/}],\n  ['master_4', ()=>{/*do sth*/}],\n  ['master_5', ()=>{/*do sth*/}],\n  ['default', ()=>{/*do sth*/}],\n])\n\n/**\n * 按钮点击事件\n * @param {string} identity 身份标识：guest客态 master主态\n * @param {number} status 活动状态：1 开团进行中 2 开团失败 3 开团成功 4 商品售罄 5 有库存未开团\n */\nconst onButtonClick = (identity,status)=>{\n  let action = actions.get(`${identity}_${status}`) || actions.get('default')\n  action.call(this)\n}\n")])])]),n("p",[t._v("上述代码核心逻辑是：把两个条件拼接成字符串，并通过以条件拼接字符串作为键，以处理函数作为值的"),n("code",[t._v("Map")]),t._v("对象进行查找并执行，这种写法在多元条件判断时候尤其好用。")]),t._v(" "),n("p",[t._v("当然上述代码如果用"),n("code",[t._v("Object")]),t._v("对象来实现也是类似的：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const actions = {\n  'guest_1':()=>{/*do sth*/},\n  'guest_2':()=>{/*do sth*/},\n  //....\n}\n\nconst onButtonClick = (identity,status)=>{\n  let action = actions[`${identity}_${status}`] || actions['default']\n  action.call(this)\n}\n")])])]),n("p",[t._v("如果有些同学觉得把查询条件拼成字符串有点别扭，那还有一种方案，就是用"),n("code",[t._v("Map")]),t._v("对象，以"),n("code",[t._v("Object")]),t._v("对象作为key：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const actions = new Map([\n  [{identity:'guest',status:1},()=>{/*do sth*/}],\n  [{identity:'guest',status:2},()=>{/*do sth*/}],\n  //...\n])\n\nconst onButtonClick = (identity,status)=>{\n  let action = [...actions].filter(([key,value])=>(key.identity == identity && key.status == status))\n  action.forEach(([key,value])=>value.call(this))\n}\n")])])]),n("p",[t._v("是不是又高级了一点点？")]),t._v(" "),n("p",[t._v("这里也看出来"),n("code",[t._v("Map")]),t._v("与"),n("code",[t._v("Object")]),t._v("的区别，"),n("code",[t._v("Map")]),t._v("可以用任何类型的数据作为key。")]),t._v(" "),n("p",[t._v("我们现在再将难度升级一点点，假如"),n("code",[t._v("guest")]),t._v("情况下，"),n("code",[t._v("status1-4")]),t._v("的处理逻辑都一样怎么办，最差的情况是这样：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const actions = new Map([\n  [{identity:'guest',status:1},()=>{/* functionA */}],\n  [{identity:'guest',status:2},()=>{/* functionA */}],\n  [{identity:'guest',status:3},()=>{/* functionA */}],\n  [{identity:'guest',status:4},()=>{/* functionA */}],\n  [{identity:'guest',status:5},()=>{/* functionB */}],\n  //...\n])\n")])])]),n("p",[t._v("好一点的写法是将处理逻辑函数进行缓存：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const actions = ()=>{\n  const functionA = ()=>{/*do sth*/}\n  const functionB = ()=>{/*do sth*/}\n  return new Map([\n    [{identity:'guest',status:1},functionA],\n    [{identity:'guest',status:2},functionA],\n    [{identity:'guest',status:3},functionA],\n    [{identity:'guest',status:4},functionA],\n    [{identity:'guest',status:5},functionB],\n    //...\n  ])\n}\n\nconst onButtonClick = (identity,status)=>{\n  let action = [...actions()].filter(([key,value])=>(key.identity == identity && key.status == status))\n  action.forEach(([key,value])=>value.call(this))\n}\n")])])]),n("p",[t._v("这样写已经能满足日常需求了，但认真一点讲，上面重写了4次"),n("code",[t._v("functionA")]),t._v("还是有点不爽，假如判断条件变得特别复杂，比如"),n("code",[t._v("identity")]),t._v("有3种状态，"),n("code",[t._v("status")]),t._v("有10种状态，那你需要定义30条处理逻辑，而往往这些逻辑里面很多都是相同的，这似乎也是笔者不想接受的，那可以这样实现:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const actions = ()=>{\n  const functionA = ()=>{/*do sth*/}\n  const functionB = ()=>{/*do sth*/}\n  return new Map([\n    [/^guest_[1-4]$/,functionA],\n    [/^guest_5$/,functionB],\n    //...\n  ])\n}\n\nconst onButtonClick = (identity,status)=>{\n  let action = [...actions()].filter(([key,value])=>(key.test(`${identity}_${status}`)))\n  action.forEach(([key,value])=>value.call(this))\n}\n")])])]),n("p",[t._v("这里"),n("code",[t._v("Map")]),t._v("的优势更加凸显，可以用正则类型作为key了，这样就有了无限可能，假如需求变成，凡是"),n("code",[t._v("guest")]),t._v("情况都要发送一个日志埋点，不同"),n("code",[t._v("status")]),t._v("情况也需要单独的逻辑处理，那我们可以这样写:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const actions = ()=>{\n  const functionA = ()=>{/*do sth*/}\n  const functionB = ()=>{/*do sth*/}\n  const functionC = ()=>{/*send log*/}\n  return new Map([\n    [/^guest_[1-4]$/,functionA],\n    [/^guest_5$/,functionB],\n    [/^guest_.*$/,functionC],\n    //...\n  ])\n}\n\nconst onButtonClick = (identity,status)=>{\n  let action = [...actions()].filter(([key,value])=>(key.test(`${identity}_${status}`)))\n  action.forEach(([key,value])=>value.call(this))\n}\n")])])]),n("p",[t._v("也就是说利用数组循环的特性，符合正则条件的逻辑都会被执行，那就可以同时执行公共逻辑和单独逻辑，因为正则的存在，你可以打开想象力解锁更多的玩法，本文就不赘述了。")]),t._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),n("p",[t._v("本文已经教你了8种逻辑判断写法，包括：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("if/else")])]),t._v(" "),n("li",[n("code",[t._v("switch")])]),t._v(" "),n("li",[t._v("一元判断时：存到"),n("code",[t._v("Object")]),t._v("里")]),t._v(" "),n("li",[t._v("一元判断时：存到"),n("code",[t._v("Map")]),t._v("里")]),t._v(" "),n("li",[t._v("多元判断时：将condition拼接成字符串存到"),n("code",[t._v("Object")]),t._v("里")]),t._v(" "),n("li",[t._v("多元判断时：将condition拼接成字符串存到"),n("code",[t._v("Map")]),t._v("里")]),t._v(" "),n("li",[t._v("多元判断时：将condition存为"),n("code",[t._v("Object")]),t._v("存到"),n("code",[t._v("Map")]),t._v("里")]),t._v(" "),n("li",[t._v("多元判断时：将condition写作正则存到"),n("code",[t._v("Map")]),t._v("里")])]),t._v(" "),n("p",[t._v("至此，本文也将告一段落，愿你未来的人生里，不只是有"),n("code",[t._v("if/else/switch")]),t._v("。")]),t._v(" "),n("p",[t._v("作者：Think\n来源：大转转FE https://juejin.cn/post/6844903705058213896")])])}),[],!1,null,null,null);n.default=a.exports}}]);