(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{368:function(t,a,e){"use strict";e.r(a);var s=e(4),n=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"又更新了-20-道-ts-练习题-你能答对几道"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#又更新了-20-道-ts-练习题-你能答对几道"}},[t._v("#")]),t._v(" 又更新了 20 道 TS 练习题，你能答对几道？")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/6JHXW9sAT6-pg0ckRjVliQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://mp.weixin.qq.com/s/6JHXW9sAT6-pg0ckRjVliQ"),a("OutboundLink")],1)])]),t._v(" "),a("blockquote",[a("p",[t._v("https://github.com/semlinker/awesome-typescript/issues")])]),t._v(" "),a("p",[t._v("前十题的参考答案 "),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI2MjcxNTQ0Nw==&mid=2247495307&idx=2&sn=49a8522477434acd6c49b6aa42c72b86&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("那 10 道 TS 练习题的参考答案来咯！"),a("OutboundLink")],1),t._v("，详细解析的 "),a("strong",[t._v("PPT")]),t._v(" 还在制作中，目前还在学习一款功能强大的 Markdown 创建 Web PPT 的工具，请小伙伴耐心等待。")]),t._v(" "),a("p",[t._v("Tser 一起练起来，答题时可以考虑直接使用在线 TS Playground，选用最新的编译器版本："),a("strong",[t._v("v4.4.2")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"第一题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一题"}},[t._v("#")]),t._v(" 第一题")]),t._v(" "),a("div",{staticClass:"language-tsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-tsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  kind"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generic-function"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeCustomer")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" User"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Error（TS 编译器版本：v4.4.2）")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Type '{ id: number; kind: string; }' is not assignable to type 'T'.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '{ id: number; kind: string; }' is assignable to the constraint of type 'T', ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// but 'T' could be instantiated with a different subtype of constraint 'User'.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    kind"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'customer'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("以上代码为什么会提示错误，应该如何解决上述问题？")]),t._v(" "),a("h3",{attrs:{id:"第二题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二题"}},[t._v("#")]),t._v(" 第二题")]),t._v(" "),a("p",[t._v("本道题我们希望参数 "),a("code",[t._v("a")]),t._v(" 和 "),a("code",[t._v("b")]),t._v(" 的类型都是一致的，即 "),a("code",[t._v("a")]),t._v(" 和 "),a("code",[t._v("b")]),t._v(" 同时为 "),a("code",[t._v("number")]),t._v(" 或 "),a("code",[t._v("string")]),t._v(" 类型。当它们的类型不一致的值，TS 类型检查器能自动提示对应的错误信息。")]),t._v(" "),a("div",{staticClass:"language-tsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-tsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("':'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// no error but b can be number!")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error as b can be number | string")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ok")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Error")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Error")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ok")]),t._v("\n")])])]),a("h3",{attrs:{id:"第三题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三题"}},[t._v("#")]),t._v(" 第三题")]),t._v(" "),a("p",[t._v("在 "),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI2MjcxNTQ0Nw==&mid=2247484142&idx=1&sn=946ba90d10e2625513f09e60a462b3a7&chksm=ea47a3b6dd302aa05af716d0bd70d8d7c682c9f4527a9a0c03cd107635711c394ab155127f9e&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("掌握 TS 这些工具类型，让你开发事半功倍"),a("OutboundLink")],1),t._v(" 这篇文章中，阿宝哥介绍了 TS 内置的工具类型："),a("code",[t._v("Partial<T>")]),t._v("，它的作用是将某个类型里的属性全部变为可选项 "),a("code",[t._v("?")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-tsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-tsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Todo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  title"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  description"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateTodo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("todo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Todo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fieldsToUpdate"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Partial"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Todo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("todo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("fieldsToUpdate "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// lib.es5.d.ts")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Partial"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("P")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("keyof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("那么如何定义一个 "),a("code",[t._v("SetOptional")]),t._v(" 工具类型，支持把给定的 keys 对应的属性变成可选的？对应的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type Foo = {\n a: number;\n b?: string;\n c: boolean;\n}\n\n// 测试用例\ntype SomeOptional = SetOptional<Foo, 'a' | 'b'>;\n\n// type SomeOptional = {\n//  a?: number; // 该属性已变成可选的\n//  b?: string; // 保持不变\n//  c: boolean; \n// }\n")])])]),a("p",[t._v("在实现 "),a("code",[t._v("SetOptional")]),t._v(" 工具类型之后，如果你感兴趣，可以继续实现 "),a("code",[t._v("SetRequired")]),t._v(" 工具类型，利用它可以把指定的 keys 对应的属性变成必填的。对应的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type Foo = {\n a?: number;\n b: string;\n c?: boolean;\n}\n\n// 测试用例\ntype SomeRequired = SetRequired<Foo, 'b' | 'c'>;\n// type SomeRequired = {\n//  a?: number;\n//  b: string; // 保持不变\n//  c: boolean; // 该属性已变成必填\n// }\n")])])]),a("h3",{attrs:{id:"第四题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第四题"}},[t._v("#")]),t._v(" 第四题")]),t._v(" "),a("p",[a("code",[t._v("Pick<T, K extends keyof T>")]),t._v(" 的作用是将某个类型中的子属性挑出来，变成包含这个类型部分属性的子类型。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('interface Todo {\n  title: string;\n  description: string;\n  completed: boolean;\n}\n\ntype TodoPreview = Pick<Todo, "title" | "completed">;\n\nconst todo: TodoPreview = {\n  title: "Clean room",\n  completed: false\n};\n')])])]),a("p",[t._v("那么如何定义一个 "),a("code",[t._v("ConditionalPick")]),t._v(" 工具类型，支持根据指定的 "),a("code",[t._v("Condition")]),t._v(" 条件来生成新的类型，对应的使用示例如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("interface Example {\n a: string;\n b: string | number;\n c: () => void;\n d: {};\n}\n\n// 测试用例：\ntype StringKeysOnly = ConditionalPick<Example, string>;\n//=> {a: string}\n")])])]),a("h3",{attrs:{id:"第五题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第五题"}},[t._v("#")]),t._v(" 第五题")]),t._v(" "),a("p",[t._v("定义一个工具类型 "),a("code",[t._v("AppendArgument")]),t._v("，为已有的函数类型增加指定类型的参数，新增的参数名是 "),a("code",[t._v("x")]),t._v("，将作为新函数类型的第一个参数。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type Fn = (a: number, b: string) => number\ntype AppendArgument<F, A> = // 你的实现代码\n\ntype FinalFn = AppendArgument<Fn, boolean> \n// (x: boolean, a: number, b: string) => number\n")])])]),a("h3",{attrs:{id:"第六题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第六题"}},[t._v("#")]),t._v(" 第六题")]),t._v(" "),a("p",[t._v("定义一个 NativeFlat 工具类型，支持把数组类型拍平（扁平化）。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type NaiveFlat<T extends any[]> = // 你的实现代码\n\n// 测试用例：\ntype NaiveResult = NaiveFlat<[['a'], ['b', 'c'], ['d']]>\n// NaiveResult的结果： \"a\" | \"b\" | \"c\" | \"d\"\n")])])]),a("p",[t._v("在完成 "),a("code",[t._v("NaiveFlat")]),t._v(" 工具类型之后，在继续实现 "),a("code",[t._v("DeepFlat")]),t._v(" 工具类型，以支持多维数组类型：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type DeepFlat<T extends any[]> = unknown // 你的实现代码\n\n// 测试用例\ntype Deep = [['a'], ['b', 'c'], [['d']], [[[['e']]]]];\ntype DeepTestResult = DeepFlat<Deep>  \n// DeepTestResult: \"a\" | \"b\" | \"c\" | \"d\" | \"e\"\n")])])]),a("h3",{attrs:{id:"第七题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第七题"}},[t._v("#")]),t._v(" 第七题")]),t._v(" "),a("p",[t._v("使用类型别名定义一个 "),a("code",[t._v("EmptyObject")]),t._v(" 类型，使得该类型只允许空对象赋值：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('type EmptyObject = {} \n\n// 测试用例\nconst shouldPass: EmptyObject = {}; // 可以正常赋值\nconst shouldFail: EmptyObject = { // 将出现编译错误\n  prop: "TS"\n}\n')])])]),a("p",[t._v("在通过 "),a("code",[t._v("EmptyObject")]),t._v(" 类型的测试用例检测后，我们来更改以下 "),a("code",[t._v("takeSomeTypeOnly")]),t._v(" 函数的类型定义，让它的参数只允许严格SomeType类型的值。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type SomeType =  {\n  prop: string\n}\n\n// 更改以下函数的类型定义，让它的参数只允许严格SomeType类型的值\nfunction takeSomeTypeOnly(x: SomeType) { return x }\n\n// 测试用例：\nconst x = { prop: 'a' };\ntakeSomeTypeOnly(x) // 可以正常调用\n\nconst y = { prop: 'a', addditionalProp: 'x' };\ntakeSomeTypeOnly(y) // 将出现编译错误\n")])])]),a("h3",{attrs:{id:"第八题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第八题"}},[t._v("#")]),t._v(" 第八题")]),t._v(" "),a("p",[t._v("定义 "),a("code",[t._v("NonEmptyArray")]),t._v(" 工具类型，用于确保数据非空数组。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type NonEmptyArray<T> = // 你的实现代码\n\nconst a: NonEmptyArray<string> = [] // 将出现编译错误\nconst b: NonEmptyArray<string> = ['Hello TS'] // 非空数据，正常使用\n")])])]),a("blockquote",[a("p",[t._v("提示：该题目有多种解法，感兴趣小伙伴可以自行尝试一下。")])]),t._v(" "),a("h3",{attrs:{id:"第九题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第九题"}},[t._v("#")]),t._v(" 第九题")]),t._v(" "),a("p",[t._v("定义一个 "),a("code",[t._v("JoinStrArray")]),t._v(" 工具类型，用于根据指定的 "),a("code",[t._v("Separator")]),t._v(" 分隔符，对字符串数组类型进行拼接。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('type JoinStrArray<Arr extends string[], Separator extends string, Result extends string = ""> = // 你的实现代码\n\n// 测试用例\ntype Names = ["Sem", "Lolo", "Kaquko"]\ntype NamesComma = JoinStrArray<Names, ","> // "Sem,Lolo,Kaquko"\ntype NamesSpace = JoinStrArray<Names, " "> // "Sem Lolo Kaquko"\ntype NamesStars = JoinStrArray<Names, "⭐️"> // "Sem⭐️Lolo⭐️Kaquko"\n')])])]),a("h3",{attrs:{id:"第十题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十题"}},[t._v("#")]),t._v(" 第十题")]),t._v(" "),a("p",[t._v("实现一个 "),a("code",[t._v("Trim")]),t._v(" 工具类型，用于对字符串字面量类型进行去空格处理。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type Trim<V extends string> = // 你的实现代码\n\n// 测试用例\nTrim<' semlinker '>\n//=> 'semlinker'\n")])])]),a("blockquote",[a("p",[t._v("提示：可以考虑先定义 TrimLeft 和 TrimRight 工具类型，再组合成 Trim 工具类型。")])]),t._v(" "),a("h3",{attrs:{id:"第十一题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十一题"}},[t._v("#")]),t._v(" 第十一题")]),t._v(" "),a("p",[t._v("实现一个 "),a("code",[t._v("IsEqual")]),t._v(" 工具类型，用于比较两个类型是否相等。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type IsEqual<A, B> = // 你的实现代码\n\n// 测试用例\ntype E0 = IsEqual<1, 2>; // false\ntype E1 = IsEqual<{ a: 1 }, { a: 1 }> // true\ntype E2 = IsEqual<[1], []>; // false\n")])])]),a("h3",{attrs:{id:"第十二题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十二题"}},[t._v("#")]),t._v(" 第十二题")]),t._v(" "),a("p",[t._v("实现一个 "),a("code",[t._v("Head")]),t._v(" 工具类型，用于获取数组类型的第一个类型。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type Head<T extends Array<any>> = // 你的实现代码\n\n// 测试用例\ntype H0 = Head<[]> // never\ntype H1 = Head<[1]> // 1\ntype H2 = Head<[3, 2]> // 3\n")])])]),a("blockquote",[a("p",[t._v("提示：该题目有多种解法，感兴趣小伙伴可以自行尝试一下。")])]),t._v(" "),a("h3",{attrs:{id:"第十三题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十三题"}},[t._v("#")]),t._v(" 第十三题")]),t._v(" "),a("p",[t._v("实现一个 "),a("code",[t._v("Tail")]),t._v(" 工具类型，用于获取数组类型除了第一个类型外，剩余的类型。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type Tail<T extends Array<any>> =  // 你的实现代码\n\n// 测试用例\ntype T0 = Tail<[]> // []\ntype T1 = Tail<[1, 2]> // [2]\ntype T2 = Tail<[1, 2, 3, 4, 5]> // [2, 3, 4, 5]\n")])])]),a("blockquote",[a("p",[t._v("提示：该题目有多种解法，感兴趣小伙伴可以自行尝试一下。")])]),t._v(" "),a("h3",{attrs:{id:"第十四题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十四题"}},[t._v("#")]),t._v(" 第十四题")]),t._v(" "),a("p",[t._v("实现一个 "),a("code",[t._v("Unshift")]),t._v(" 工具类型，用于把指定类型 "),a("code",[t._v("E")]),t._v(" 作为第一个元素添加到 "),a("code",[t._v("T")]),t._v(" 数组类型中。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type Unshift<T extends any[], E> =  // 你的实现代码\n\n// 测试用例\ntype Arr0 = Unshift<[], 1>; // [1]\ntype Arr1 = Unshift<[1, 2, 3], 0>; // [0, 1, 2, 3]\n")])])]),a("blockquote",[a("p",[t._v("提示：该题目有多种解法，感兴趣小伙伴可以自行尝试一下。")])]),t._v(" "),a("h3",{attrs:{id:"第十五题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十五题"}},[t._v("#")]),t._v(" 第十五题")]),t._v(" "),a("p",[t._v("实现一个 "),a("code",[t._v("Shift")]),t._v(" 工具类型，用于移除 "),a("code",[t._v("T")]),t._v(" 数组类型中的第一个类型。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type Shift<T extends any[]> = // 你的实现代码\n\n// 测试用例\ntype S0 = Shift<[1, 2, 3]> // [2, 3]\ntype S1 = Shift<[string,number,boolean]> // [number,boolean]\n")])])]),a("h3",{attrs:{id:"第十六题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十六题"}},[t._v("#")]),t._v(" 第十六题")]),t._v(" "),a("p",[t._v("实现一个 "),a("code",[t._v("Push")]),t._v(" 工具类型，用于把指定类型 "),a("code",[t._v("E")]),t._v(" 作为最后一个元素添加到 "),a("code",[t._v("T")]),t._v(" 数组类型中。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type Push<T extends any[], V> = // 你的实现代码\n\n// 测试用例\ntype Arr0 = Push<[], 1> // [1]\ntype Arr1 = Push<[1, 2, 3], 4> // [1, 2, 3, 4]\n")])])]),a("h3",{attrs:{id:"第十七题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十七题"}},[t._v("#")]),t._v(" 第十七题")]),t._v(" "),a("p",[t._v("实现一个 "),a("code",[t._v("Includes")]),t._v(" 工具类型，用于判断指定的类型 "),a("code",[t._v("E")]),t._v(" 是否包含在 "),a("code",[t._v("T")]),t._v(" 数组类型中。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type Includes<T extends Array<any>, E> = // 你的实现代码\n\ntype I0 = Includes<[], 1> // false\ntype I1 = Includes<[2, 2, 3, 1], 2> // true\ntype I2 = Includes<[2, 3, 3, 1], 1> // true\n")])])]),a("blockquote",[a("p",[t._v("提示：该题目有多种解法，感兴趣小伙伴可以自行尝试一下。")])]),t._v(" "),a("h3",{attrs:{id:"第十八题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十八题"}},[t._v("#")]),t._v(" 第十八题")]),t._v(" "),a("p",[t._v("实现一个 "),a("code",[t._v("UnionToIntersection")]),t._v(" 工具类型，用于把联合类型转换为交叉类型。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type UnionToIntersection<U> = // 你的实现代码\n\n// 测试用例\ntype U0 = UnionToIntersection<string | number> // never\ntype U1 = UnionToIntersection<{ name: string } | { age: number }> // { name: string; } & { age: number; }\n")])])]),a("h3",{attrs:{id:"第十九题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第十九题"}},[t._v("#")]),t._v(" 第十九题")]),t._v(" "),a("p",[t._v("实现一个 "),a("code",[t._v("OptionalKeys")]),t._v(" 工具类型，用来获取对象类型中声明的可选属性。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('type Person = {\n  id: string;\n  name: string;\n  age: number;\n  from?: string;\n  speak?: string;\n};\n\ntype OptionalKeys<T> = // 你的实现代码\ntype PersonOptionalKeys = OptionalKeys<Person> // "from" | "speak"\n')])])]),a("blockquote",[a("p",[t._v("提示：该题目有多种解法，感兴趣小伙伴可以自行尝试一下。")])]),t._v(" "),a("h3",{attrs:{id:"第二十题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二十题"}},[t._v("#")]),t._v(" 第二十题")]),t._v(" "),a("p",[t._v("实现一个 "),a("code",[t._v("Curry")]),t._v(" 工具类型，用来实现函数类型的柯里化处理。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type Curry<\n  F extends (...args: any[]) => any,\n  P extends any[] = Parameters<F>, \n  R = ReturnType<F> \n> = // 你的实现代码\n\ntype F0 = Curry<() => Date>; // () => Date\ntype F1 = Curry<(a: number) => Date>; // (arg: number) => Date\ntype F2 = Curry<(a: number, b: string) => Date>; //  (arg_0: number) => (b: string) => Date\n")])])]),a("h3",{attrs:{id:"第二十一题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二十一题"}},[t._v("#")]),t._v(" 第二十一题")]),t._v(" "),a("p",[t._v("实现一个 "),a("code",[t._v("Merge")]),t._v(" 工具类型，用于把两个类型合并成一个新的类型。第二种类型（SecondType）的 "),a("code",[t._v("Keys")]),t._v(" 将会覆盖第一种类型（FirstType）的 "),a("code",[t._v("Keys")]),t._v("。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type Foo = {\n a: number;\n b: string;\n};\n\ntype Bar = {\n b: number;\n};\n\ntype Merge<FirstType, SecondType> = // 你的实现代码\n\nconst ab: Merge<Foo, Bar> = { a: 1, b: 2 };\n")])])]),a("h3",{attrs:{id:"第二十二题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二十二题"}},[t._v("#")]),t._v(" 第二十二题")]),t._v(" "),a("p",[t._v("实现一个 "),a("code",[t._v("RequireAtLeastOne")]),t._v(" 工具类型，它将创建至少含有一个给定 "),a("code",[t._v("Keys")]),t._v(" 的类型，其余的 "),a("code",[t._v("Keys")]),t._v(" 保持原样。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type Responder = {\n text?: () => string;\n json?: () => string;\n secure?: boolean;\n};\n\ntype RequireAtLeastOne<\n ObjectType,\n KeysType extends keyof ObjectType = keyof ObjectType,\n> = // 你的实现代码\n\n// 表示当前类型至少包含 'text' 或 'json' 键\nconst responder: RequireAtLeastOne<Responder, 'text' | 'json'> = {\n json: () => '{\"message\": \"ok\"}',\n secure: true\n};\n")])])]),a("h3",{attrs:{id:"第二十三题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二十三题"}},[t._v("#")]),t._v(" 第二十三题")]),t._v(" "),a("p",[t._v("实现一个 "),a("code",[t._v("RemoveIndexSignature")]),t._v(" 工具类型，用于移除已有类型中的索引签名。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("interface Foo {\n  [key: string]: any;\n  [key: number]: any;\n  bar(): void;\n}\n\ntype RemoveIndexSignature<T> = // 你的实现代码\n\ntype FooWithOnlyBar = RemoveIndexSignature<Foo>; //{ bar: () => void; }\n")])])]),a("h3",{attrs:{id:"第二十四题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二十四题"}},[t._v("#")]),t._v(" 第二十四题")]),t._v(" "),a("p",[t._v("实现一个 "),a("code",[t._v("Mutable")]),t._v(" 工具类型，用于移除对象类型上所有属性或部分属性的 "),a("code",[t._v("readonly")]),t._v("修饰符。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type Foo = {\n  readonly a: number;\n  readonly b: string;\n  readonly c: boolean;\n};\n\ntype Mutable<T, Keys extends keyof T = keyof T> = // 你的实现代码\n\nconst mutableFoo: Mutable<Foo, 'a'> = { a: 1, b: '2', c: true };\n\nmutableFoo.a = 3; // OK\nmutableFoo.b = '6'; // Cannot assign to 'b' because it is a read-only property.\n")])])]),a("h3",{attrs:{id:"第二十五题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二十五题"}},[t._v("#")]),t._v(" 第二十五题")]),t._v(" "),a("p",[t._v("实现一个 "),a("code",[t._v("IsUnion")]),t._v(" 工具类型，判断指定的类型是否为联合类型。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type IsUnion<T, U = T> = // 你的实现代码\n\ntype I0 = IsUnion<string|number> // true\ntype I1 = IsUnion<string|never> // false\ntype I2 =IsUnion<string|unknown> // false\n")])])]),a("h3",{attrs:{id:"第二十六题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二十六题"}},[t._v("#")]),t._v(" 第二十六题")]),t._v(" "),a("p",[t._v("实现一个 "),a("code",[t._v("IsNever")]),t._v(" 工具类型，判断指定的类型是否为 "),a("code",[t._v("never")]),t._v(" 类型。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type I0 = IsNever<never> // true\ntype I1 = IsNever<never | string> // false\ntype I2 = IsNever<null> // false\n")])])]),a("h3",{attrs:{id:"第二十七题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二十七题"}},[t._v("#")]),t._v(" 第二十七题")]),t._v(" "),a("p",[t._v("实现一个 "),a("code",[t._v("Reverse")]),t._v(" 工具类型，用于对元组类型中元素的位置颠倒，并返回该数组。元组的第一个元素会变成最后一个，最后一个元素变成第一个。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type Reverse<\n  T extends Array<any>,\n  R extends Array<any> = []\n> = // 你的实现代码\n\ntype R0 = Reverse<[]> // []\ntype R1 = Reverse<[1, 2, 3]> // [3, 2, 1]\n")])])]),a("h3",{attrs:{id:"第二十八题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二十八题"}},[t._v("#")]),t._v(" 第二十八题")]),t._v(" "),a("p",[t._v("实现一个 "),a("code",[t._v("Split")]),t._v(" 工具类型，根据给定的分隔符（Delimiter）对包含分隔符的字符串进行切割。可用于定义 "),a("code",[t._v("String.prototype.split")]),t._v(" 方法的返回值类型。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('type Item = \'semlinker,lolo,kakuqo\';\n\ntype Split<\n S extends string, \n Delimiter extends string,\n> = // 你的实现代码\n\ntype ElementType = Split<Item, \',\'>; // ["semlinker", "lolo", "kakuqo"]\n')])])]),a("h3",{attrs:{id:"第二十九题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二十九题"}},[t._v("#")]),t._v(" 第二十九题")]),t._v(" "),a("p",[t._v("实现一个 "),a("code",[t._v("ToPath")]),t._v(" 工具类型，用于把属性访问（"),a("code",[t._v(".")]),t._v(" 或 "),a("code",[t._v("[]")]),t._v("）路径转换为元组的形式。具体的使用示例如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type ToPath<S extends string> = // 你的实现代码\n\nToPath<'foo.bar.baz'> //=> ['foo', 'bar', 'baz']\nToPath<'foo[0].bar.baz'> //=> ['foo', '0', 'bar', 'baz']\n")])])]),a("h3",{attrs:{id:"第三十题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三十题"}},[t._v("#")]),t._v(" 第三十题")]),t._v(" "),a("p",[t._v("完善 "),a("code",[t._v("Chainable")]),t._v(" 类型的定义，使得 TS 能成功推断出 "),a("code",[t._v("result")]),t._v(" 变量的类型。调用 "),a("code",[t._v("option")]),t._v(" 方法之后会不断扩展当前对象的类型，使得调用 "),a("code",[t._v("get")]),t._v(" 方法后能获取正确的类型。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("declare const config: Chainable\n\ntype Chainable = {\n  option(key: string, value: any): any\n  get(): any\n}\n\nconst result = config\n  .option('age', 7)\n  .option('name', 'lolo')\n  .option('address', { value: 'XiaMen' })\n  .get()\n\ntype ResultType = typeof result  \n// 期望 ResultType 的类型是：\n// {\n//   age: number\n//   name: string\n//   address: {\n//     value: string\n//   }\n// }\n")])])]),a("blockquote",[a("p",[t._v("关注「全栈修仙之路」阅读阿宝哥原创的 4 本免费电子书（累计下载 5万+）及 11 篇 Vue 3 进阶系列教程。")])])])}),[],!1,null,null,null);a.default=n.exports}}]);