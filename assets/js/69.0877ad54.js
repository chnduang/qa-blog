(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{361:function(a,t,r){"use strict";r.r(t);var e=r(4),s=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"javascript数组扁平化-flat-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript数组扁平化-flat-方法"}},[a._v("#")]),a._v(" JavaScript数组扁平化(flat)方法")]),a._v(" "),t("h2",{attrs:{id:"q-多维数组-一维数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#q-多维数组-一维数组"}},[a._v("#")]),a._v(" Q: 多维数组=>一维数组")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr = [1, [2, [3, [4, 5]]], 6];\n// [1,2,3,4,5,6]\nlet str = jsON.stringify(ary);\n")])])]),t("h3",{attrs:{id:"_1-直接调用-flat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-直接调用-flat"}},[a._v("#")]),a._v(" ① 直接调用 flat()")]),a._v(" "),t("p",[a._v("注意：flat和flatMap方法为ES2019(ES10)方法，目前还未在所有浏览器完全兼容")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("arr.flat(Infinity);\n")])])]),t("h3",{attrs:{id:"_2-扩展运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-扩展运算符"}},[a._v("#")]),a._v(" ② 扩展运算符")]),a._v(" "),t("p",[a._v("通过判断数组中是否存在是 数组的值，一层一层的解构")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("while (ary.some(Array.isArray)) {\n  ary = [].concat(...ary);\n}\n")])])]),t("h3",{attrs:{id:"_3-使用replace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用replace"}},[a._v("#")]),a._v(" ③ 使用replace")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("str.replace(/(\\[\\]))/g, '').split(',');\n")])])]),t("h3",{attrs:{id:"_4递归处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4递归处理"}},[a._v("#")]),a._v(" ④递归处理")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let result = [];\nlet fn = function(ary) {\n  for(let i = 0; i < ary.length; i++) }{\n    let item = ary[i];\n    if (Array.isArray(ary[i])){\n      fn(item);\n    } else {\n      result.push(item);\n    }\n  }\n}\n")])])]),t("h3",{attrs:{id:"_5-用-reduce-实现数组的-flat-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-用-reduce-实现数组的-flat-方法"}},[a._v("#")]),a._v(" ⑤ 用 reduce 实现数组的 flat 方法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function flatten(ary) {\n  return ary.reduce((pre, cur) => {\n    return pre.concat(Array.isArray(cur) ? flatten(cur) : cur);\n  })\n}\nlet ary = [1, 2, [3, 4], [5, [6, 7]]]\nconsole.log(ary.MyFlat(Infinity))\n\n\n\nconst flattened = [\n    [0, 1],\n    [2, 3],\n    [4, 5],\n].reduce((accumulator, current) => accumulator.concat(current), []);\nconsole.log(flattened); // [ 0, 1, 2, 3, 4, 5 ]\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);