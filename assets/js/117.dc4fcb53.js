(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{409:function(t,a,e){"use strict";e.r(a);var r=e(4),n=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"说说你对react-router的理解-常用的router组件有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说说你对react-router的理解-常用的router组件有哪些"}},[t._v("#")]),t._v(" 说说你对React Router的理解？常用的Router组件有哪些？")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/gH31uF9VIibQbrWf2fg247OcJTicZcd4ibedEyPvQFJ2gh2DkIJOcNibvW4PKz474RsdfyLXzKkz8r5K4nJG1kL1eQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),a("h2",{attrs:{id:"一、是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、是什么"}},[t._v("#")]),t._v(" 一、是什么")]),t._v(" "),a("p",[a("code",[t._v("react-router")]),t._v("等前端路由的原理大致相同，可以实现无刷新的条件下切换显示不同的页面")]),t._v(" "),a("p",[t._v("路由的本质就是页面的"),a("code",[t._v("URL")]),t._v("发生改变时，页面的显示结果可以根据"),a("code",[t._v("URL")]),t._v("的变化而变化，但是页面不会刷新")]),t._v(" "),a("p",[t._v("因此，可以通过前端路由可以实现单页(SPA)应用")]),t._v(" "),a("p",[a("code",[t._v("react-router")]),t._v("主要分成了几个不同的包：")]),t._v(" "),a("ul",[a("li",[t._v("react-router: 实现了路由的核心功能")]),t._v(" "),a("li",[t._v("react-router-dom：基于 react-router，加入了在浏览器运行环境下的一些功能")]),t._v(" "),a("li",[t._v("react-router-native：基于 react-router，加入了 react-native 运行环境下的一些功能")]),t._v(" "),a("li",[t._v("react-router-config: 用于配置静态路由的工具库")])]),t._v(" "),a("h2",{attrs:{id:"二、有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、有哪些"}},[t._v("#")]),t._v(" 二、有哪些")]),t._v(" "),a("p",[t._v("这里主要讲述的是"),a("code",[t._v("react-router-dom")]),t._v("的常用"),a("code",[t._v("API")]),t._v("，主要是提供了一些组件：")]),t._v(" "),a("ul",[a("li",[t._v("BrowserRouter、HashRouter")]),t._v(" "),a("li",[t._v("Route")]),t._v(" "),a("li",[t._v("Link、NavLink")]),t._v(" "),a("li",[t._v("switch")]),t._v(" "),a("li",[t._v("redirect")])]),t._v(" "),a("h3",{attrs:{id:"browserrouter、hashrouter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#browserrouter、hashrouter"}},[t._v("#")]),t._v(" BrowserRouter、HashRouter")]),t._v(" "),a("p",[a("code",[t._v("Router")]),t._v("中包含了对路径改变的监听，并且会将相应的路径传递给子组件")]),t._v(" "),a("p",[a("code",[t._v("BrowserRouter")]),t._v("是"),a("code",[t._v("history")]),t._v("模式，"),a("code",[t._v("HashRouter")]),t._v("模式")]),t._v(" "),a("p",[t._v("使用两者作为最顶层组件包裹其他组件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import { BrowserRouter as Router } from "react-router-dom";\n\nexport default function App() {\n  return (\n    <Router>\n      <main>\n        <nav>\n          <ul>\n            <li>\n              <a href="/">Home</a>\n            </li>\n            <li>\n              <a href="/about">About</a>\n            </li>\n            <li>\n              <a href="/contact">Contact</a>\n            </li>\n          </ul>\n        </nav>\n      </main>\n    </Router>\n  );\n}\n')])])]),a("h3",{attrs:{id:"route"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#route"}},[t._v("#")]),t._v(" Route")]),t._v(" "),a("p",[a("code",[t._v("Route")]),t._v("用于路径的匹配，然后进行组件的渲染，对应的属性如下：")]),t._v(" "),a("ul",[a("li",[t._v("path 属性：用于设置匹配到的路径")]),t._v(" "),a("li",[t._v("component 属性：设置匹配到路径后，渲染的组件")]),t._v(" "),a("li",[t._v("render 属性：设置匹配到路径后，渲染的内容")]),t._v(" "),a("li",[t._v("exact 属性：开启精准匹配，只有精准匹配到完全一致的路径，才会渲染对应的组件")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import { BrowserRouter as Router, Route } from "react-router-dom";\n\nexport default function App() {\n  return (\n    <Router>\n      <main>\n        <nav>\n          <ul>\n            <li>\n              <a href="/">Home</a>\n            </li>\n            <li>\n              <a href="/about">About</a>\n            </li>\n            <li>\n              <a href="/contact">Contact</a>\n            </li>\n          </ul>\n        </nav>\n        <Route path="/" render={() => <h1>Welcome!</h1>} />\n      </main>\n    </Router>\n  );\n}\n')])])]),a("h3",{attrs:{id:"link、navlink"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#link、navlink"}},[t._v("#")]),t._v(" Link、NavLink")]),t._v(" "),a("p",[t._v("通常路径的跳转是使用"),a("code",[t._v("Link")]),t._v("组件，最终会被渲染成"),a("code",[t._v("a")]),t._v("元素，其中属性"),a("code",[t._v("to")]),t._v("代替"),a("code",[t._v("a")]),t._v("标题的"),a("code",[t._v("href")]),t._v("属性")]),t._v(" "),a("p",[a("code",[t._v("NavLink")]),t._v("是在"),a("code",[t._v("Link")]),t._v("基础之上增加了一些样式属性，例如组件被选中时，发生样式变化，则可以设置"),a("code",[t._v("NavLink")]),t._v("的以下属性：")]),t._v(" "),a("ul",[a("li",[t._v("activeStyle：活跃时（匹配时）的样式")]),t._v(" "),a("li",[t._v("activeClassName：活跃时添加的class")])]),t._v(" "),a("p",[t._v("如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<NavLink to="/" exact activeStyle={{color: "red"}}>首页</NavLink>\n<NavLink to="/about" activeStyle={{color: "red"}}>关于</NavLink>\n<NavLink to="/profile" activeStyle={{color: "red"}}>我的</NavLink>\n')])])]),a("p",[t._v("如果需要实现"),a("code",[t._v("js")]),t._v("实现页面的跳转，那么可以通过下面的形式：")]),t._v(" "),a("p",[t._v("通过"),a("code",[t._v("Route")]),t._v("作为顶层组件包裹其他组件后,页面组件就可以接收到一些路由相关的东西，比如"),a("code",[t._v("props.history")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('const Contact = ({ history }) => (\n  <Fragment>\n    <h1>Contact</h1>\n    <button onClick={() => history.push("/")}>Go to home</button>\n    <FakeText />\n  </Fragment>\n);\nprops`中接收到的`history`对象具有一些方便的方法，如`goBack`，`goForward`,`push\n')])])]),a("h3",{attrs:{id:"redirect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redirect"}},[t._v("#")]),t._v(" redirect")]),t._v(" "),a("p",[t._v("用于路由的重定向，当这个组件出现时，就会执行跳转到对应的"),a("code",[t._v("to")]),t._v("路径中，如下例子：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('const About = ({\n  match: {\n    params: { name },\n  },\n}) => (\n  // props.match.params.name\n  <Fragment>\n    {name !== "tom" ? <Redirect to="/" /> : null}\n    <h1>About {name}</h1>\n    <FakeText />\n  </Fragment>\n)\n')])])]),a("p",[t._v("上述组件当接收到的路由参数"),a("code",[t._v("name")]),t._v(" 不等于 "),a("code",[t._v("tom")]),t._v(" 的时候，将会自动重定向到首页")]),t._v(" "),a("h3",{attrs:{id:"switch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#switch"}},[t._v("#")]),t._v(" switch")]),t._v(" "),a("p",[a("code",[t._v("swich")]),t._v("组件的作用适用于当匹配到第一个组件的时候，后面的组件就不应该继续匹配")]),t._v(" "),a("p",[t._v("如下例子：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<Switch>\n  <Route exact path="/" component={Home} />\n  <Route path="/about" component={About} />\n  <Route path="/profile" component={Profile} />\n  <Route path="/:userid" component={User} />\n  <Route component={NoMatch} />\n</Switch>\n')])])]),a("p",[t._v("如果不使用"),a("code",[t._v("switch")]),t._v("组件进行包裹")]),t._v(" "),a("p",[t._v("除了一些路由相关的组件之外，"),a("code",[t._v("react-router")]),t._v("还提供一些"),a("code",[t._v("hooks")]),t._v("，如下：")]),t._v(" "),a("ul",[a("li",[t._v("useHistory")]),t._v(" "),a("li",[t._v("useParams")]),t._v(" "),a("li",[t._v("useLocation")])]),t._v(" "),a("h3",{attrs:{id:"usehistory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usehistory"}},[t._v("#")]),t._v(" useHistory")]),t._v(" "),a("p",[a("code",[t._v("useHistory")]),t._v("可以让组件内部直接访问"),a("code",[t._v("history")]),t._v("，无须通过"),a("code",[t._v("props")]),t._v("获取")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import { useHistory } from "react-router-dom";\n\nconst Contact = () => {\n  const history = useHistory();\n  return (\n    <Fragment>\n      <h1>Contact</h1>\n      <button onClick={() => history.push("/")}>Go to home</button>\n    </Fragment>\n  );\n};\n')])])]),a("h3",{attrs:{id:"useparams"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#useparams"}},[t._v("#")]),t._v(" useParams")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('const About = () => {\n  const { name } = useParams();\n  return (\n    // props.match.params.name\n    <Fragment>\n      {name !== "John Doe" ? <Redirect to="/" /> : null}\n      <h1>About {name}</h1>\n      <Route component={Contact} />\n    </Fragment>\n  );\n};\n')])])]),a("h3",{attrs:{id:"uselocation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uselocation"}},[t._v("#")]),t._v(" useLocation")]),t._v(" "),a("p",[a("code",[t._v("useLocation")]),t._v(" 会返回当前 "),a("code",[t._v("URL")]),t._v("的 "),a("code",[t._v("location")]),t._v("对象")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import { useLocation } from "react-router-dom";\n\nconst Contact = () => {\n  const { pathname } = useLocation();\n\n  return (\n    <Fragment>\n      <h1>Contact</h1>\n      <p>Current URL: {pathname}</p>\n    </Fragment>\n  );\n};\n')])])]),a("h2",{attrs:{id:"三、参数传递"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、参数传递"}},[t._v("#")]),t._v(" 三、参数传递")]),t._v(" "),a("p",[t._v("这些路由传递参数主要分成了三种形式：")]),t._v(" "),a("ul",[a("li",[t._v("动态路由的方式")]),t._v(" "),a("li",[t._v("search传递参数")]),t._v(" "),a("li",[t._v("to传入对象")])]),t._v(" "),a("h3",{attrs:{id:"动态路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态路由"}},[t._v("#")]),t._v(" 动态路由")]),t._v(" "),a("p",[t._v("动态路由的概念指的是路由中的路径并不会固定")]),t._v(" "),a("p",[t._v("例如将"),a("code",[t._v("path")]),t._v("在"),a("code",[t._v("Route")]),t._v("匹配时写成"),a("code",[t._v("/detail/:id")]),t._v("，那么 "),a("code",[t._v("/detail/abc")]),t._v("、"),a("code",[t._v("/detail/123")]),t._v("都可以匹配到该"),a("code",[t._v("Route")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<NavLink to="/detail/abc123">详情</NavLink>\n\n<Switch>\n    ... 其他Route\n    <Route path="/detail/:id" component={Detail}/>\n    <Route component={NoMatch} />\n</Switch>\n')])])]),a("p",[t._v("获取参数方式如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("console.log(props.match.params.xxx)\n")])])]),a("h3",{attrs:{id:"search传递参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#search传递参数"}},[t._v("#")]),t._v(" search传递参数")]),t._v(" "),a("p",[t._v("在跳转的路径中添加了一些query参数；")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<NavLink to="/detail2?name=why&age=18">详情2</NavLink>\n\n<Switch>\n  <Route path="/detail2" component={Detail2}/>\n</Switch>\n')])])]),a("p",[t._v("获取形式如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("console.log(props.location.search)\n")])])]),a("h3",{attrs:{id:"to传入对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#to传入对象"}},[t._v("#")]),t._v(" to传入对象")]),t._v(" "),a("p",[t._v("传递方式如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<NavLink to={{\n    pathname: "/detail2", \n    query: {name: "kobe", age: 30},\n    state: {height: 1.98, address: "洛杉矶"},\n    search: "?apikey=123"\n  }}>\n  详情2\n</NavLink>\n')])])]),a("p",[t._v("获取参数的形式如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("console.log(props.location)\n")])])]),a("h2",{attrs:{id:"参考文献"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),a("ul",[a("li",[t._v("http://react-guide.github.io/react-router-cn/docs/API.html#route")])])])}),[],!1,null,null,null);a.default=n.exports}}]);