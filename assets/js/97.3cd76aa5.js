(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{389:function(t,e,a){"use strict";a.r(e);var s=a(4),n=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"react构建组件的方式有哪些-区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react构建组件的方式有哪些-区别"}},[t._v("#")]),t._v(" React构建组件的方式有哪些？区别？")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/gH31uF9VIibSVlnjlXOv7M6SiaOV3tm39xtjO1Jme5ThApvDhAS6QnLSWweukmezChKtibfOeB4M23bFFHCJ0PP0g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),e("h2",{attrs:{id:"一、是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、是什么"}},[t._v("#")]),t._v(" 一、是什么")]),t._v(" "),e("p",[t._v("组件就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式")]),t._v(" "),e("p",[t._v("在"),e("code",[t._v("React")]),t._v("中，一个类、一个函数都可以视为一个组件")]),t._v(" "),e("p",[t._v("在"),e("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzU1OTgxNDQ1Nw==&mid=2247484292&idx=1&sn=76ff2903942ce748b58e9339997b7969&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue系列"),e("OutboundLink")],1),t._v("中，我们了解到组件所存在的优势：")]),t._v(" "),e("ul",[e("li",[t._v("降低整个系统的耦合度，在保持接口不变的情况下，我们可以替换不同的组件快速完成需求，例如输入框，可以替换为日历、时间、范围等组件作具体的实现")]),t._v(" "),e("li",[t._v("调试方便，由于整个系统是通过组件组合起来的，在出现问题的时候，可以用排除法直接移除组件，或者根据报错的组件快速定位问题，之所以能够快速定位，是因为每个组件之间低耦合，职责单一，所以逻辑会比分析整个系统要简单")]),t._v(" "),e("li",[t._v("提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的，所以对代码进行优化可获得系统的整体升级")])]),t._v(" "),e("h2",{attrs:{id:"二、如何构建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、如何构建"}},[t._v("#")]),t._v(" 二、如何构建")]),t._v(" "),e("p",[t._v("在"),e("code",[t._v("React")]),t._v("目前来讲，组件的创建主要分成了三种方式：")]),t._v(" "),e("ul",[e("li",[t._v("函数式创建")]),t._v(" "),e("li",[t._v("通过 React.createClass 方法创建")]),t._v(" "),e("li",[t._v("继承 React.Component 创建")])]),t._v(" "),e("h3",{attrs:{id:"函数式创建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数式创建"}},[t._v("#")]),t._v(" 函数式创建")]),t._v(" "),e("p",[t._v("在"),e("code",[t._v("React Hooks")]),t._v("出来之前，函数式组件可以视为无状态组件，只负责根据传入的"),e("code",[t._v("props")]),t._v("来展示视图，不涉及对"),e("code",[t._v("state")]),t._v("状态的操作")]),t._v(" "),e("p",[t._v("大多数组件可以写为无状态组件，通过简单组合构建其他组件")]),t._v(" "),e("p",[t._v("在"),e("code",[t._v("React")]),t._v("中，通过函数简单创建组件的示例如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function HelloComponent(props, /* context */) {\n  return <div>Hello {props.name}</div>\n}\n")])])]),e("h3",{attrs:{id:"通过-react-createclass-方法创建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过-react-createclass-方法创建"}},[t._v("#")]),t._v(" 通过 React.createClass 方法创建")]),t._v(" "),e("p",[e("code",[t._v("React.createClass")]),t._v("是react刚开始推荐的创建组件的方式，目前这种创建方式已经不怎么用了")]),t._v(" "),e("p",[t._v("像上述通过函数式创建的组件的方式，最终会通过"),e("code",[t._v("babel")]),t._v("转化成"),e("code",[t._v("React.createClass")]),t._v("这种形式，转化成如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('function HelloComponent(props) /* context */{\n  return React.createElement(\n    "div",\n    null,\n    "Hello ",\n    props.name\n  );\n}\n')])])]),e("p",[t._v("由于上述的编写方式过于冗杂，目前基本上不使用上")]),t._v(" "),e("h3",{attrs:{id:"继承-react-component-创建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#继承-react-component-创建"}},[t._v("#")]),t._v(" 继承 React.Component 创建")]),t._v(" "),e("p",[t._v("同样在"),e("code",[t._v("react hooks")]),t._v("出来之前，有状态的组件只能通过继承"),e("code",[t._v("React.Component")]),t._v("这种形式进行创建")]),t._v(" "),e("p",[t._v("有状态的组件也就是组件内部存在维护的数据，在类创建的方式中通过"),e("code",[t._v("this.state")]),t._v("进行访问")]),t._v(" "),e("p",[t._v("当调用"),e("code",[t._v("this.setState")]),t._v("修改组件的状态时，组件会再次会调用"),e("code",[t._v("render()")]),t._v("方法进行重新渲染")]),t._v(" "),e("p",[t._v("通过继承"),e("code",[t._v("React.Component")]),t._v("创建一个时钟示例如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { seconds: 0 };\n  }\n\n  tick() {\n    this.setState(state => ({\n      seconds: state.seconds + 1\n    }));\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div>\n        Seconds: {this.state.seconds}\n      </div>\n    );\n  }\n}\n")])])]),e("h2",{attrs:{id:"三、区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、区别"}},[t._v("#")]),t._v(" 三、区别")]),t._v(" "),e("p",[t._v("由于"),e("code",[t._v("React.createClass")]),t._v("创建的方式过于冗杂，并不建议使用")]),t._v(" "),e("p",[t._v("而像函数式创建和类组件创建的区别主要在于需要创建的组件是否需要为有状态组件：")]),t._v(" "),e("ul",[e("li",[t._v("对于一些无状态的组件创建，建议使用函数式创建的方式")]),t._v(" "),e("li",[t._v("由于"),e("code",[t._v("react hooks")]),t._v("的出现，函数式组件创建的组件通过使用"),e("code",[t._v("hooks")]),t._v("方法也能使之成为有状态组件，再加上目前推崇函数式编程，所以这里建议都使用函数式的方式来创建组件")])]),t._v(" "),e("p",[t._v("在考虑组件的选择原则上，能用无状态组件则用无状态组件")]),t._v(" "),e("h2",{attrs:{id:"参考文献"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),e("ul",[e("li",[t._v("https://react.docschina.org/")])])])}),[],!1,null,null,null);e.default=n.exports}}]);