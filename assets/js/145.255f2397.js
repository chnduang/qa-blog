(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{436:function(e,_,v){"use strict";v.r(_);var o=v(4),t=Object(o.a)({},(function(){var e=this,_=e._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h2",{attrs:{id:"介绍一下-tree-shaking-及其工作原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#介绍一下-tree-shaking-及其工作原理"}},[e._v("#")]),e._v(" 介绍一下 tree shaking 及其工作原理")]),e._v(" "),_("blockquote",[_("p",[_("a",{attrs:{href:"https://mp.weixin.qq.com/s/ry7pkoPZ10w2rfEZ-NSEfw",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://mp.weixin.qq.com/s/ry7pkoPZ10w2rfEZ-NSEfw"),_("OutboundLink")],1)])]),e._v(" "),_("h2",{attrs:{id:"写在前面"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#写在前面"}},[e._v("#")]),e._v(" 写在前面")]),e._v(" "),_("p",[e._v("今天这道题目是在和小红书的一位面试官聊的时候：")]),e._v(" "),_("p",[e._v("我：如果要你选择一道题目来考察面试者，你最有可能选择哪一道？")]),e._v(" "),_("p",[e._v("面试官：那应该就是介绍一下"),_("code",[e._v("tree shaking")]),e._v("及其工作原理？")]),e._v(" "),_("p",[e._v("我：为什么？")]),e._v(" "),_("p",[e._v("面试官：是因为最近面了好多同学，大家都说熟悉"),_("code",[e._v("webpack")]),e._v("，在项目中如何去使用、如何去优化，也都或多或少会提到"),_("code",[e._v("tree shaking")]),e._v("，但是每当我深入去问其工作机制或者原理时，却少有人能回答上来。（小声 bb：并不是我想内卷，确实是工程师的基本素养啊，哈哈 😄）")]),e._v(" "),_("p",[e._v("面试官：那你来回答一下这个问题？")]),e._v(" "),_("p",[e._v("我：我也用过"),_("code",[e._v("tree shaking")]),e._v("，只是知道它的别名叫"),_("code",[e._v("树摇")]),e._v("，最早是由"),_("code",[e._v("Rollup")]),e._v("实现，是一种采用"),_("code",[e._v("删除不需要的额外代码的方式优化代码体积")]),e._v("的技术。但是关于它的原理，我还真的不知道，额，，，，")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/LNrWl4n5XIJLTpM8MaxFeoDqVU7D7pS9o9hQrUcxYcJ9fsqqC4uSmMFb3zXSLscAx9BWYYWtcxDyNB19zrsicOw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),e._v(" "),_("blockquote",[_("p",[e._v("“")]),e._v(" "),_("p",[e._v("我们平时更多时候是停留在应用层面，这种只是能满足基础的业务诉求，对于后期的技术深挖以及个人的职业发展都是受限的。还是那句老话：知其然，更要知其所以然～")])]),e._v(" "),_("p",[e._v("话不多说，下面我就带大家一起来深入探究这个问题。")]),e._v(" "),_("h2",{attrs:{id:"什么是tree-shaking"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是tree-shaking"}},[e._v("#")]),e._v(" 什么是"),_("code",[e._v("Tree shaking")])]),e._v(" "),_("blockquote",[_("p",[e._v("“")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("Tree shaking` 是一种通过清除多余代码方式来优化项目打包体积的技术，专业术语叫 `Dead code elimination\n")])])])]),e._v(" "),_("p",[e._v("这个概念，我相信大多数同学都是了解的。什么，你不懂？")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/LNrWl4n5XIJLTpM8MaxFeoDqVU7D7pS99xhyPYPAvVSyjyeYyicXeP2xiciclqcpfgrLrfdddVj2EDiaMZnjjrxia2g/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),e._v(" "),_("p",[e._v("不懂没关系，我可以教你啊（不过那是另外的价钱，哈哈 🙈）")]),e._v(" "),_("p",[e._v("走远了，兄弟，让我们言归正传："),_("code",[e._v("tree shaking")]),e._v("如何工作的呢?")]),e._v(" "),_("h2",{attrs:{id:"tree-shaking如何工作的呢"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tree-shaking如何工作的呢"}},[e._v("#")]),e._v(" "),_("code",[e._v("tree shaking")]),e._v("如何工作的呢?")]),e._v(" "),_("p",[e._v("虽然 "),_("code",[e._v("tree shaking")]),e._v(" 的概念在 1990 就提出了，但直到 "),_("code",[e._v("ES6")]),e._v(" 的 "),_("code",[e._v("ES6-style")]),e._v(" 模块出现后才真正被利用起来。")]),e._v(" "),_("p",[e._v("在"),_("code",[e._v("ES6")]),e._v("以前，我们可以使用"),_("code",[e._v("CommonJS")]),e._v("引入模块："),_("code",[e._v("require()")]),e._v("，这种引入是动态的，也意味着我们可以基于条件来导入需要的代码：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v('let dynamicModule;\n// 动态导入\nif (condition) {\n  myDynamicModule = require("foo");\n} else {\n  myDynamicModule = require("bar");\n}\n')])])]),_("p",[e._v("但是"),_("code",[e._v("CommonJS")]),e._v("规范无法确定在实际运行前需要或者不需要某些模块，所以"),_("code",[e._v("CommonJS")]),e._v("不适合"),_("code",[e._v("tree-shaking")]),e._v("机制。在 "),_("code",[e._v("ES6")]),e._v(" 中，引入了完全静态的导入语法："),_("code",[e._v("import")]),e._v("。这也意味着下面的导入是不可行的：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v('// 不可行，ES6 的import是完全静态的\nif (condition) {\n  myDynamicModule = require("foo");\n} else {\n  myDynamicModule = require("bar");\n}\n')])])]),_("p",[e._v("我们只能通过导入所有的包后再进行条件获取。如下：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v('import foo from "foo";\nimport bar from "bar";\n\nif (condition) {\n  // foo.xxxx\n} else {\n  // bar.xxx\n}\n')])])]),_("p",[_("code",[e._v("ES6")]),e._v("的"),_("code",[e._v("import")]),e._v("语法可以完美使用"),_("code",[e._v("tree shaking")]),e._v("，因为可以在代码不运行的情况下就能分析出不需要的代码。")]),e._v(" "),_("p",[e._v("看完上面的分析，你可能还是有点懵，这里我简单做下总结：因为"),_("code",[e._v("tree shaking")]),e._v("只能在静态"),_("code",[e._v("modules")]),e._v("下工作。"),_("code",[e._v("ECMAScript 6")]),e._v(" 模块加载是静态的,因此整个依赖树可以被静态地推导出解析语法树。所以在 "),_("code",[e._v("ES6")]),e._v(" 中使用 "),_("code",[e._v("tree shaking")]),e._v(" 是非常容易的。")]),e._v(" "),_("h2",{attrs:{id:"tree-shaking的原理是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tree-shaking的原理是什么"}},[e._v("#")]),e._v(" "),_("code",[e._v("tree shaking")]),e._v("的原理是什么?")]),e._v(" "),_("p",[e._v("看完上面的分析，相信这里你可以很容易的得出题目的答案了：")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("ES6 Module")]),e._v("引入进行静态分析，故而编译的时候正确判断到底加载了那些模块")]),e._v(" "),_("li",[e._v("静态分析程序流，判断那些模块和变量未被使用或者引用，进而删除对应代码")])]),e._v(" "),_("h2",{attrs:{id:"common-js-和-es6-中模块引入的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#common-js-和-es6-中模块引入的区别"}},[e._v("#")]),e._v(" common.js 和 es6 中模块引入的区别？")]),e._v(" "),_("p",[e._v("但到这里，本篇文章还没结束。从这道题目我们可以很容易的引申出来另外一道“明星”面试题："),_("code",[e._v("common.js 和 es6 中模块引入的区别？")])]),e._v(" "),_("p",[e._v("这道题目来自"),_("code",[e._v("冴羽")]),e._v("大佬的"),_("strong",[e._v("阿里前端攻城狮们写了一份前端面试题答案，请查收")]),e._v("[1]")]),e._v(" "),_("p",[e._v("这里就直接贴下他给出的答案了：")]),e._v(" "),_("p",[_("code",[e._v("CommonJS")]),e._v(" 是一种模块规范，最初被应用于 "),_("code",[e._v("Nodejs")]),e._v("，成为 "),_("code",[e._v("Nodejs")]),e._v(" 的模块规范。运行在浏览器端的 "),_("code",[e._v("JavaScript")]),e._v(" 由于也缺少类似的规范，在 "),_("code",[e._v("ES6")]),e._v(" 出来之前，前端也实现了一套相同的模块规范 (例如: "),_("code",[e._v("AMD")]),e._v(")，用来对前端模块进行管理。自 "),_("code",[e._v("ES6")]),e._v(" 起，引入了一套新的 "),_("code",[e._v("ES6 Module")]),e._v(" 规范，在语言标准的层面上实现了模块功能，而且实现得相当简单，有望成为浏览器和服务器通用的模块解决方案。但目前浏览器对 "),_("code",[e._v("ES6 Module")]),e._v(" 兼容还不太好，我们平时在 "),_("code",[e._v("Webpack")]),e._v(" 中使用的 "),_("code",[e._v("export")]),e._v(" 和 "),_("code",[e._v("import")]),e._v("，会经过 "),_("code",[e._v("Babel")]),e._v(" 转换为 "),_("code",[e._v("CommonJS")]),e._v(" 规范。在使用上的差别主要有：")]),e._v(" "),_("p",[e._v("1、"),_("code",[e._v("CommonJS")]),e._v(" 模块输出的是一个值的拷贝，"),_("code",[e._v("ES6")]),e._v(" 模块输出的是值的引用。")]),e._v(" "),_("p",[e._v("2、"),_("code",[e._v("CommonJS")]),e._v(" 模块是运行时加载，"),_("code",[e._v("ES6")]),e._v(" 模块是编译时输出接口。")]),e._v(" "),_("p",[e._v("3、"),_("code",[e._v("CommonJs")]),e._v(" 是单个值导出，"),_("code",[e._v("ES6 Module")]),e._v("可以导出多个")]),e._v(" "),_("p",[e._v("4、"),_("code",[e._v("CommonJs")]),e._v(" 是动态语法可以写在判断里，"),_("code",[e._v("ES6 Module")]),e._v(" 静态语法只能写在顶层")]),e._v(" "),_("p",[e._v("5、"),_("code",[e._v("CommonJs")]),e._v(" 的 "),_("code",[e._v("this")]),e._v(" 是当前模块，"),_("code",[e._v("ES6 Module")]),e._v("的 "),_("code",[e._v("this")]),e._v(" 是 "),_("code",[e._v("undefined")])]),e._v(" "),_("p",[_("code",[e._v("冴羽")]),e._v("大佬的文章质量都非常高，也欢迎大家多去支持"),_("code",[e._v("冴羽")]),e._v("大佬，相信看完一定会对你有所收获。")])])}),[],!1,null,null,null);_.default=t.exports}}]);