(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{401:function(t,e,n){"use strict";n.r(e);var o=n(4),a=Object(o.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"说说react-router有几种模式-实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说说react-router有几种模式-实现原理"}},[t._v("#")]),t._v(" 说说React Router有几种模式？实现原理？")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/gH31uF9VIibQsTeuPt9ZohWrrVr3icribvTImBxRCbhkCogBYNKgKgT9mCOyKM4yjgkV6kLZ0ziciaKbg8G0pgcQOKA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),e("h2",{attrs:{id:"一、是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、是什么"}},[t._v("#")]),t._v(" 一、是什么")]),t._v(" "),e("p",[t._v("在单页应用中，一个"),e("code",[t._v("web")]),t._v("项目只有一个"),e("code",[t._v("html")]),t._v("页面，一旦页面加载完成之后，就不用因为用户的操作而进行页面的重新加载或者跳转，其特性如下：")]),t._v(" "),e("ul",[e("li",[t._v("改变 url 且不让浏览器像服务器发送请求")]),t._v(" "),e("li",[t._v("在不刷新页面的前提下动态改变浏览器地址栏中的URL地址")])]),t._v(" "),e("p",[t._v("其中主要分成了两种模式：")]),t._v(" "),e("ul",[e("li",[t._v("hash 模式：在url后面加上#，如http://127.0.0.1:5500/home/#/page1")]),t._v(" "),e("li",[t._v("history 模式：允许操作浏览器的曾经在标签页或者框架里访问的会话历史记录")])]),t._v(" "),e("h2",{attrs:{id:"二、使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、使用"}},[t._v("#")]),t._v(" 二、使用")]),t._v(" "),e("p",[e("code",[t._v("React Router")]),t._v("对应的"),e("code",[t._v("hash")]),t._v("模式和"),e("code",[t._v("history")]),t._v("模式对应的组件为：")]),t._v(" "),e("ul",[e("li",[t._v("HashRouter")]),t._v(" "),e("li",[t._v("BrowserRouter")])]),t._v(" "),e("p",[t._v("这两个组件的使用都十分的简单，作为最顶层组件包裹其他组件，如下所示")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 1.import { BrowserRouter as Router } from "react-router-dom";\n// 2.import { HashRouter as Router } from "react-router-dom";\n\nimport React from \'react\';\nimport {\n  BrowserRouter as Router,\n  // HashRouter as Router  \n  Switch,\n  Route,\n} from "react-router-dom";\nimport Home from \'./pages/Home\';\nimport Login from \'./pages/Login\';\nimport Backend from \'./pages/Backend\';\nimport Admin from \'./pages/Admin\';\n\n\nfunction App() {\n  return (\n    <Router>\n        <Route path="/login" component={Login}/>\n        <Route path="/backend" component={Backend}/>\n        <Route path="/admin" component={Admin}/>\n        <Route path="/" component={Home}/>\n    </Router>\n  );\n}\n\nexport default App;\n')])])]),e("h2",{attrs:{id:"三、实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、实现原理"}},[t._v("#")]),t._v(" 三、实现原理")]),t._v(" "),e("p",[t._v("路由描述了 "),e("code",[t._v("URL")]),t._v(" 与 "),e("code",[t._v("UI")]),t._v("之间的映射关系，这种映射是单向的，即 URL 变化引起 UI 更新（无需刷新页面）")]),t._v(" "),e("p",[t._v("下面以"),e("code",[t._v("hash")]),t._v("模式为例子，改变"),e("code",[t._v("hash")]),t._v("值并不会导致浏览器向服务器发送请求，浏览器不发出请求，也就不会刷新页面")]),t._v(" "),e("p",[e("code",[t._v("hash")]),t._v(" 值改变，触发全局 "),e("code",[t._v("window")]),t._v(" 对象上的 "),e("code",[t._v("hashchange")]),t._v(" 事件。所以 "),e("code",[t._v("hash")]),t._v(" 模式路由就是利用 "),e("code",[t._v("hashchange")]),t._v(" 事件监听 "),e("code",[t._v("URL")]),t._v(" 的变化，从而进行 "),e("code",[t._v("DOM")]),t._v(" 操作来模拟页面跳转")]),t._v(" "),e("p",[e("code",[t._v("react-router")]),t._v("也是基于这个特性实现路由的跳转")]),t._v(" "),e("p",[t._v("下面以"),e("code",[t._v("HashRouter")]),t._v("组件分析进行展开：")]),t._v(" "),e("h2",{attrs:{id:"hashrouter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashrouter"}},[t._v("#")]),t._v(" HashRouter")]),t._v(" "),e("p",[e("code",[t._v("HashRouter")]),t._v("包裹了整应用，")]),t._v(" "),e("p",[t._v("通过"),e("code",[t._v("window.addEventListener('hashChange',callback)")]),t._v("监听"),e("code",[t._v("hash")]),t._v("值的变化，并传递给其嵌套的组件")]),t._v(" "),e("p",[t._v("然后通过"),e("code",[t._v("context")]),t._v("将"),e("code",[t._v("location")]),t._v("数据往后代组件传递，如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import React, { Component } from 'react';\nimport { Provider } from './context'\n// 该组件下Api提供给子组件使用\nclass HashRouter extends Component {\n  constructor() {\n    super()\n    this.state = {\n      location: {\n        pathname: window.location.hash.slice(1) || '/'\n      }\n    }\n  }\n  // url路径变化 改变location\n  componentDidMount() {\n    window.location.hash = window.location.hash || '/'\n    window.addEventListener('hashchange', () => {\n      this.setState({\n        location: {\n          ...this.state.location,\n          pathname: window.location.hash.slice(1) || '/'\n        }\n      }, () => console.log(this.state.location))\n    })\n  }\n  render() {\n    let value = {\n      location: this.state.location\n    }\n    return (\n      <Provider value={value}>\n        {\n          this.props.children\n        }\n      </Provider>\n    );\n  }\n}\n\nexport default HashRouter;\n")])])]),e("h3",{attrs:{id:"router"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#router"}},[t._v("#")]),t._v(" Router")]),t._v(" "),e("p",[e("code",[t._v("Router")]),t._v("组件主要做的是通过"),e("code",[t._v("BrowserRouter")]),t._v("传过来的当前值，通过"),e("code",[t._v("props")]),t._v("传进来的"),e("code",[t._v("path")]),t._v("与"),e("code",[t._v("context")]),t._v("传进来的"),e("code",[t._v("pathname")]),t._v("进行匹配，然后决定是否执行渲染组件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import React, { Component } from 'react';\nimport { Consumer } from './context'\nconst { pathToRegexp } = require(\"path-to-regexp\");\nclass Route extends Component {\n  render() {\n    return (\n      <Consumer>\n        {\n          state => {\n            console.log(state)\n            let {path, component: Component} = this.props\n            let pathname = state.location.pathname\n            let reg = pathToRegexp(path, [], {end: false})\n            // 判断当前path是否包含pathname\n            if(pathname.match(reg)) {\n              return <Component></Component>\n            }\n            return null\n          }\n        }\n      </Consumer>\n    );\n  }\n}\nexport default Route;\n")])])]),e("h2",{attrs:{id:"参考文献"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),e("ul",[e("li",[t._v("https://juejin.cn/post/6870376090297171975#heading-9")]),t._v(" "),e("li",[t._v("https://segmentfault.com/a/1190000023560665")])])])}),[],!1,null,null,null);e.default=a.exports}}]);